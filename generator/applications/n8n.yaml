name: n8n
productName: N8n
appVersion: 1.101.1
description: is <<a workflow automation platform with native AI capabilities>>
home: https://n8n.io/
icon: https://raw.githubusercontent.com/cowboysysop/charts/master/charts/n8n/icon.png
license: 2025
source: https://github.com/n8n-io/n8n
version: 1.0.0
components:
  - name: n8n
    deployment:
      type: deployment
      waitPostgresql: true
#       # waitRedis: true
      container:
        env: |
          {{- if or .Values.postgresql.enabled .Values.externalPostgresql.enabled }}
          - name: DB_TYPE
            value: postgresdb
          - name: DB_POSTGRESDB_HOST
            value: {{ include "n8n.postgresql.host" . | quote }}
          - name: DB_POSTGRESDB_PORT
            value: {{ include "n8n.postgresql.port" . | quote }}
          - name: DB_POSTGRESDB_USER
            value: {{ include "n8n.postgresql.username" . | quote }}
          - name: DB_POSTGRESDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "n8n.postgresql.secretName" . }}
                key: {{ include "n8n.postgresql.secretKeyPassword" . }}
          - name: DB_POSTGRESDB_DATABASE
            value: {{ include "n8n.postgresql.database" . | quote }}
          {{- end }}
          - name: N8N_PORT
            value: {{ .Values.containerPorts.http | quote }}
          - name: N8N_SECURE_COOKIE
            value: "false"
          - name: GENERIC_TIMEZONE
            value: {{ .Values.n8n.timezone | quote }}
          - name: TZ
            value: {{ .Values.n8n.timezone | quote }}
#           - name: N8N_LOG_LEVEL
#             value: "debug"
#           - name: N8N_METRICS
#             value: "true"
#           # - name: N8N_METRICS_INCLUDE_WORKFLOW_ID_LABEL
#           #   value: "true"
#           # - name: N8N_METRICS_INCLUDE_NODE_TYPE_LABEL
#           #   value: "true"
#           # - name: N8N_METRICS_INCLUDE_CREDENTIAL_TYPE_LABEL
#           #   value: "true"
#           # - name: N8N_METRICS_INCLUDE_API_ENDPOINTS
#           #   value: "true"
#           # - name: N8N_METRICS_INCLUDE_API_PATH_LABEL
#           #   value: "true"
#           # - name: N8N_METRICS_INCLUDE_API_METHOD_LABEL
#           #   value: "true"
#           # - name: N8N_METRICS_INCLUDE_API_STATUS_CODE_LABEL
#           #   value: "true"
#           {{- end }}
#           - name: N8N_ENCRYPTION_KEY
#             value: "test"
#           - name: N8N_DIAGNOSTICS_ENABLED
#             value: "false"
#           - name: N8N_SMTP_HOST
#             value: {{ .Values.smtp.host | quote }}
#           - name: N8N_SMTP_PORT
#             value: {{ .Values.smtp.port | quote }}
#           - name: N8N_SMTP_SSL
#             value: {{ ternary "true" "false" .Values.smtp.ssl | quote }}
#           # {{- if and .Values.smtp.username .Values.smtp.password }}
#           - name: N8N_SMTP_USER
#             value: {{ .Values.smtp.username | quote }}
#           - name: N8N_SMTP_PASS
#             valueFrom:
#               secretKeyRef:
#                 name: {{ include "n8n.secretName" . }}
#                 key: {{ include "n8n.secretKeySmtpPassword" . }}
#           # {{- end }}
#           - name: N8N_EDITOR_BASE_URL
#             value: {{ .Values.externalUrl | quote }}
#           - name: WEBHOOK_URL
#             value: {{ .Values.externalUrl | quote }}
#         livenessProbe:
#           initialDelaySeconds: 180
#           httpGet:
#             path: /healthz
#         readinessProbe:
#           httpGet:
#             path: /healthz
#         startupProbe:
#           httpGet:
#             path: /healthz
    image:
      registry: docker.n8n.io
      repository: n8nio/n8n
      tag: 1.101.1
    ingress: true
#     metrics:
#       optional: true
#     secret: |
#       # {{- if and .Values.smtp.username .Values.smtp.password }}
#       n8n-smtp-password: {{ .Values.smtp.password | b64enc | quote }}
#       # {{- end }}
#     secretKeyHelpers: |
#       {{/*
#       Key in Secret that contains SMTP password
#       */}}
#       {{- define "n8n.secretKeySmtpPassword" -}}
#       {{- if .Values.existingSecret -}}
#           {{ .Values.existingSecretKeySmtpPassword }}
#       {{- else -}}
#           n8n-smtp-password
#       {{- end -}}
#       {{- end -}}
#     secretKeyValues: |
#       ## @param existingSecretKeySmtpPassword Key in existing Secret that contains SMTP password
#       existingSecretKeySmtpPassword: n8n-smtp-password
    service:
      ports:
        - name: http
          number: 5678
          description: HTTP
#     serviceMonitor: true
    extraValues: |
      n8n:
        ## @param n8n.timezone Timezone
        timezone: Etc/UTC
#       smtp:
#         ## @param smtp.host SMTP host
#         host: ""

#         ## @param smtp.port SMTP port
#         port: 587

#         ## @param smtp.ssl Whether to use SSL for SMTP
#         ssl: false

#         ## @param smtp.username SMTP username
#         username: ""

#         ## @param smtp.password SMTP password
#         password: ""
#   - name: worker
#     description: Worker
#     deployment:
#       type: deployment
#       # waitRedis: true
#       container:
#         args: |
#           - worker
#         env: |
#           # - name: DB_TYPE
#           #   value: postgresdb
#           # - name: DB_POSTGRESDB_HOST
#           #   value: {{ include "n8n.postgresql.host" . | quote }}
#           # - name: DB_POSTGRESDB_PORT
#           #   value: {{ include "n8n.postgresql.port" . | quote }}
#           # - name: DB_POSTGRESDB_USER
#           #   value: {{ include "n8n.postgresql.username" . | quote }}
#           # - name: DB_POSTGRESDB_PASSWORD
#           #   valueFrom:
#           #     secretKeyRef:
#           #       name: {{ include "n8n.postgresql.secretName" . }}
#           #       key: {{ include "n8n.postgresql.secretKeyPassword" . }}
#           # - name: DB_POSTGRESDB_DATABASE
#           #   value: {{ include "n8n.postgresql.database" . | quote }}
#           - name: QUEUE_BULL_REDIS_HOST
#             value: {{ include "n8n.redis.host" . | quote }}
#           - name: QUEUE_BULL_REDIS_PORT
#             value: {{ include "n8n.redis.port" . | quote }}
#           - name: QUEUE_BULL_REDIS_PASSWORD
#             valueFrom:
#               secretKeyRef:
#                 name: {{ include "n8n.redis.secretName" . }}
#                 key: {{ include "n8n.redis.secretKeyPassword" . }}
#           - name: QUEUE_HEALTH_CHECK_ACTIVE
#             value: "true"
#           - name: QUEUE_HEALTH_CHECK_PORT
#             value: {{ .Values.worker.containerPorts.probes | quote }}
#         ports:
#           - name: probes
#             nameContainer: http-probes
#             number: 5678
#             description: Probes
#         livenessProbe:
#           httpGet:
#             path: /healthz
#             port: http-probes
#         readinessProbe:
#           httpGet:
#             path: /healthz
#             port: http-probes
#         startupProbe:
#           httpGet:
#             path: /healthz
#             port: http-probes
#     image:
#       registry: docker.n8n.io
#       repository: n8nio/n8n
#       tag: 1.101.1
postgresql: optional
# redis: true
tests: |
  import requests


  def test_service_connection():
      url = "http://{{ include "n8n.fullname" . }}:{{ .Values.service.ports.http }}/"

      response = requests.get(url)

      assert response.status_code == 200
