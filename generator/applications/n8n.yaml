name: n8n
productName: N8n
appVersion: 1.102.3
description: is <<a workflow automation platform with native AI capabilities>>
home: https://n8n.io/
icon: https://raw.githubusercontent.com/cowboysysop/charts/master/charts/n8n/icon.png
license: 2025
source: https://github.com/n8n-io/n8n
version: 1.0.0
readme: |
  ## Queue mode

  To run N8n in queue mode:

  - Set `n8n.executionsMode` parameter to `queue`
  - Set `worker.enabled` parameter to `true`
  - Set `postgresql.enabled` parameter or `externalPostgresql.enabled` parameter to `true`
  - Set `redis.enabled` parameter or `externalRedis.enabled` parameter to `true`
components:
  - name: n8n
    deployment:
      type: deployment
      waitPostgresql: true
      waitRedis: true
      container:
        env: |
          {{- if or .Values.postgresql.enabled .Values.externalPostgresql.enabled }}
          - name: DB_TYPE
            value: postgresdb
          - name: DB_POSTGRESDB_HOST
            value: {{ include "n8n.postgresql.host" . | quote }}
          - name: DB_POSTGRESDB_PORT
            value: {{ include "n8n.postgresql.port" . | quote }}
          - name: DB_POSTGRESDB_USER
            value: {{ include "n8n.postgresql.username" . | quote }}
          - name: DB_POSTGRESDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "n8n.postgresql.secretName" . }}
                key: {{ include "n8n.postgresql.secretKeyPassword" . }}
          - name: DB_POSTGRESDB_DATABASE
            value: {{ include "n8n.postgresql.database" . | quote }}
          {{- end }}
          - name: N8N_ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: {{ include "n8n.secretName" . }}
                key: {{ include "n8n.secretKeyEncryptionKey" . }}
          - name: N8N_PORT
            value: {{ .Values.containerPorts.http | quote }}
          - name: N8N_DIAGNOSTICS_ENABLED
            value: "false"
          - name: N8N_METRICS
            value: {{ .Values.metrics.enabled | quote }}
          - name: N8N_METRICS_INCLUDE_CACHE_METRICS
            value: "true"
          - name: N8N_METRICS_INCLUDE_MESSAGE_EVENT_BUS_METRICS
            value: "true"
          - name: N8N_METRICS_INCLUDE_WORKFLOW_ID_LABEL
            value: "true"
          - name: N8N_METRICS_INCLUDE_NODE_TYPE_LABEL
            value: "true"
          - name: N8N_METRICS_INCLUDE_CREDENTIAL_TYPE_LABEL
            value: "true"
          - name: N8N_METRICS_INCLUDE_API_ENDPOINTS
            value: "true"
          - name: N8N_METRICS_INCLUDE_API_PATH_LABEL
            value: "true"
          - name: N8N_METRICS_INCLUDE_API_METHOD_LABEL
            value: "true"
          - name: N8N_METRICS_INCLUDE_API_STATUS_CODE_LABEL
            value: "true"
          - name: N8N_METRICS_INCLUDE_QUEUE_METRICS
            value: "true"
          - name: WEBHOOK_URL
            value: {{ .Values.n8n.externalUrl | quote }}
          - name: EXECUTIONS_MODE
            value: {{ .Values.n8n.executionsMode | quote }}
          {{- if eq .Values.n8n.executionsMode "queue" }}
          - name: OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS
            value: "true"
          {{- end }}
          {{- if or .Values.redis.enabled .Values.externalRedis.enabled }}
          - name: QUEUE_BULL_REDIS_HOST
            value: {{ include "n8n.redis.host" . | quote }}
          - name: QUEUE_BULL_REDIS_PORT
            value: {{ include "n8n.redis.port" . | quote }}
          - name: QUEUE_BULL_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "n8n.redis.secretName" . }}
                key: {{ include "n8n.redis.secretKeyPassword" . }}
          {{- end }}
          - name: N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS
            value: "true"
          - name: N8N_SECURE_COOKIE
            value: "false"
          - name: N8N_RUNNERS_ENABLED
            value: "true"
          - name: GENERIC_TIMEZONE
            value: {{ .Values.n8n.timezone | quote }}
          - name: TZ
            value: {{ .Values.n8n.timezone | quote }}
          - name: N8N_SMTP_HOST
            value: {{ .Values.smtp.host | quote }}
          - name: N8N_SMTP_PORT
            value: {{ .Values.smtp.port | quote }}
          - name: N8N_SMTP_USER
            value: {{ .Values.smtp.username | quote }}
          - name: N8N_SMTP_PASS
            valueFrom:
              secretKeyRef:
                name: {{ include "n8n.secretName" . }}
                key: {{ include "n8n.secretKeySmtpPassword" . }}
          - name: N8N_SMTP_SSL
            value: {{ .Values.smtp.tls.enabled | quote }}
          - name: N8N_SMTP_STARTTLS
            value: {{ .Values.smtp.tls.startTls | quote }}
#           - name: N8N_EDITOR_BASE_URL
#             value: {{ .Values.externalUrl | quote }}
        livenessProbe:
          # initialDelaySeconds: 180
          httpGet:
            path: /healthz
        readinessProbe:
          httpGet:
            path: /healthz/readiness
        startupProbe:
          httpGet:
            path: /healthz
    image:
      registry: docker.n8n.io
      repository: n8nio/n8n
      tag: 1.102.3
    ingress: true
    metrics:
      optional: true
    secret: |
      encryption-key: {{ .Values.n8n.encryptionKey | b64enc | quote }}
      smtp-password: {{ .Values.smtp.password | b64enc | quote }}
    secretKeyHelpers: |
      {{/*
      Key in Secret that contains encryption key
      */}}
      {{- define "n8n.secretKeyEncryptionKey" -}}
      {{- if .Values.existingSecret -}}
          {{ .Values.existingSecretKeyEncryptionKey }}
      {{- else -}}
          encryption-key
      {{- end -}}
      {{- end -}}

      {{/*
      Key in Secret that contains SMTP password
      */}}
      {{- define "n8n.secretKeySmtpPassword" -}}
      {{- if .Values.existingSecret -}}
          {{ .Values.existingSecretKeySmtpPassword }}
      {{- else -}}
          smtp-password
      {{- end -}}
      {{- end -}}
    secretKeyValues: |
      ## @param existingSecretKeyEncryptionKey Key in existing Secret that contains encryption key
      existingSecretKeyEncryptionKey: encryption-key

      ## @param existingSecretKeySmtpPassword Key in existing Secret that contains SMTP password
      existingSecretKeySmtpPassword: smtp-password
    service:
      ports:
        - name: http
          number: 5678
          description: HTTP
    serviceMonitor:
      port: http
    extraValues: |
      n8n:
        ## @param n8n.encryptionKey Encryption key
        encryptionKey: ""

        ## @param n8n.externalUrl External URL
        externalUrl: http://n8n.local

        ## @param n8n.executionsMode Whether executions should run directly or using queue
        executionsMode: regular

        ## @param n8n.timezone Timezone
        timezone: Etc/UTC
      smtp:
        ## @param smtp.host SMTP host
        host: smtp.local

        ## @param smtp.port SMTP port
        port: 25

        ## @param smtp.username SMTP user
        username: ""

        ## @param smtp.password SMTP password
        password: ""

        tls:
          ## @param smtp.tls.enabled Enable TLS for SMTP
          enabled: false

           ## @param smtp.tls.startTls Enable STARTTLS for SMTP
          startTls: false
  - name: worker
    description: Worker
    optional: true
    enabled: false
    deployment:
      type: deployment
      waitPostgresql: true
      waitRedis: true
      container:
        args: |
          - worker
        env: |
          - name: DB_TYPE
            value: postgresdb
          - name: DB_POSTGRESDB_HOST
            value: {{ include "n8n.postgresql.host" . | quote }}
          - name: DB_POSTGRESDB_PORT
            value: {{ include "n8n.postgresql.port" . | quote }}
          - name: DB_POSTGRESDB_USER
            value: {{ include "n8n.postgresql.username" . | quote }}
          - name: DB_POSTGRESDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "n8n.postgresql.secretName" . }}
                key: {{ include "n8n.postgresql.secretKeyPassword" . }}
          - name: DB_POSTGRESDB_DATABASE
            value: {{ include "n8n.postgresql.database" . | quote }}
          - name: N8N_ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: {{ include "n8n.secretName" . }}
                key: {{ include "n8n.secretKeyEncryptionKey" . }}
          - name: N8N_METRICS
            value: {{ .Values.worker.metrics.enabled | quote }}
          - name: N8N_METRICS_INCLUDE_CACHE_METRICS
            value: "true"
          - name: N8N_METRICS_INCLUDE_MESSAGE_EVENT_BUS_METRICS
            value: "true"
          - name: N8N_METRICS_INCLUDE_WORKFLOW_ID_LABEL
            value: "true"
          - name: N8N_METRICS_INCLUDE_NODE_TYPE_LABEL
            value: "true"
          - name: N8N_METRICS_INCLUDE_CREDENTIAL_TYPE_LABEL
            value: "true"
          - name: N8N_METRICS_INCLUDE_API_ENDPOINTS
            value: "true"
          - name: N8N_METRICS_INCLUDE_API_PATH_LABEL
            value: "true"
          - name: N8N_METRICS_INCLUDE_API_METHOD_LABEL
            value: "true"
          - name: N8N_METRICS_INCLUDE_API_STATUS_CODE_LABEL
            value: "true"
          - name: N8N_METRICS_INCLUDE_QUEUE_METRICS
            value: "true"
          - name: QUEUE_BULL_REDIS_HOST
            value: {{ include "n8n.redis.host" . | quote }}
          - name: QUEUE_BULL_REDIS_PORT
            value: {{ include "n8n.redis.port" . | quote }}
          - name: QUEUE_BULL_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "n8n.redis.secretName" . }}
                key: {{ include "n8n.redis.secretKeyPassword" . }}
          - name: QUEUE_HEALTH_CHECK_ACTIVE
            value: "true"
          - name: QUEUE_HEALTH_CHECK_PORT
            value: {{ .Values.worker.containerPorts.metrics | quote }}
          - name: N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS
            value: "true"
          - name: N8N_RUNNERS_ENABLED
            value: "true"
        ports:
          - name: metrics
            nameContainer: http-metrics
            number: 5678
            description: Metrics
        livenessProbe:
          httpGet:
            path: /healthz
            port: http-metrics
        readinessProbe:
          httpGet:
            path: /healthz/readiness
            port: http-metrics
        startupProbe:
          httpGet:
            path: /healthz
            port: http-metrics
    image:
      registry: docker.n8n.io
      repository: n8nio/n8n
      tag: 1.102.3
    metrics:
      optional: true
    podMonitor:
      port: http-metrics
postgresql: optional
redis: optional
tests: |
  import requests


  def test_service_connection():
      url = "http://{{ include "n8n.fullname" . }}:{{ .Values.service.ports.http }}/"

      response = requests.get(url)

      assert response.status_code == 200
