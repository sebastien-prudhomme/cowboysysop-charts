name: mongo-express
productName: Mongo Express
appVersion: 1.0.2
description: is a <<web-based MongoDB admin interface, written with Node.js and express>>
home: https://github.com/mongo-express/mongo-express
icon: https://raw.githubusercontent.com/mongo-express/mongo-express/master/public/images/mongo-express-logo.png
license: 2020
source: https://github.com/mongo-express/mongo-express
version: 5.1.1
updates: |
  ### Upgrading to version 5.0.0

  The chart is now tested with Kubernetes >= 1.24 and Helm >= 3.9.

  Future upgrades may introduce undetected breaking changes if you continue to use older versions.

  ### Upgrading to version 4.0.0

  Some parameters related to port management have been modified:

  - Parameter `service.port` has been renamed `service.ports.http`.
  - Parameter `service.nodePort` has been renamed `service.nodePorts.http`.

  ### Upgrading to version 3.0.0

  Some parameters related to image management have been modified:

  - Registry prefix in `image.repository` parameters is now configured in `image.registry`.
  - Parameter `imagePullSecrets` has been renamed `global.imagePullSecrets`.

  ### Upgrading to version 2.0.0

  The chart is no more compatible with Helm 2.

  Refer to the [Helm documentation](https://helm.sh/docs/topics/v2_v3_migration/) for more information.
components:
  - name: mongo-express
    deployment:
      type: deployment
      container:
        env: |
          - name: PORT
            value: {{ .Values.containerPorts.http | quote }}
          - name: MONGODB_SERVER
            value: {{ .Values.mongodbServer | quote }}
          - name: MONGODB_PORT
            value: {{ .Values.mongodbPort | quote }}
          - name: ME_CONFIG_MONGODB_ENABLE_ADMIN
            value: {{ .Values.mongodbEnableAdmin | quote }}
          {{- if .Values.mongodbEnableAdmin }}
          {{- if and .Values.mongodbAdminUsername .Values.mongodbAdminPassword}}
          - name: MONGODB_USERNAME
            value: {{ .Values.mongodbAdminUsername | quote }}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "mongo-express.secretName" . }}
                key: {{ include "mongo-express.secretKeyMongodbAdminPassword" . }}
          - name: ME_CONFIG_MONGODB_URL
            value: "mongodb://$(MONGODB_USERNAME):$(MONGODB_PASSWORD)@$(MONGODB_SERVER):$(MONGODB_PORT)/"
          {{- else }}
          - name: ME_CONFIG_MONGODB_URL
            value: "mongodb://$(MONGODB_SERVER):$(MONGODB_PORT)/"
          {{- end }}
          {{- else }}
          - name: MONGODB_DATABASE
            value: {{ .Values.mongodbAuthDatabase | quote }}
          {{- if and .Values.mongodbAuthUsername .Values.mongodbAuthPassword}}
          - name: MONGODB_USERNAME
            value: {{ .Values.mongodbAuthUsername | quote }}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "mongo-express.secretName" . }}
                key: {{ include "mongo-express.secretKeyMongodbAuthPassword" . }}
          - name: ME_CONFIG_MONGODB_URL
            value: "mongodb://$(MONGODB_USERNAME):$(MONGODB_PASSWORD)@$(MONGODB_SERVER):$(MONGODB_PORT)/$(MONGODB_DATABASE)"
          {{- else }}
          - name: ME_CONFIG_MONGODB_URL
            value: "mongodb://$(MONGODB_SERVER):$(MONGODB_PORT)/$(MONGODB_DATABASE)"
          {{- end }}
          {{- end }}
          - name: ME_CONFIG_SITE_BASEURL
            value: {{ .Values.siteBaseUrl | quote }}
          - name: ME_CONFIG_SITE_COOKIESECRET
            valueFrom:
              secretKeyRef:
                name: {{ include "mongo-express.secretName" . }}
                key: {{ include "mongo-express.secretKeySiteCookieSecret" . }}
          - name: ME_CONFIG_SITE_SESSIONSECRET
            valueFrom:
              secretKeyRef:
                name: {{ include "mongo-express.secretName" . }}
                key: {{ include "mongo-express.secretKeySiteSessionSecret" . }}
          {{- if and .Values.basicAuthUsername .Values.basicAuthPassword }}
          - name: ME_CONFIG_BASICAUTH
            value: "true"
          - name: ME_CONFIG_BASICAUTH_USERNAME
            value: {{ .Values.basicAuthUsername | quote }}
          - name: ME_CONFIG_BASICAUTH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "mongo-express.secretName" . }}
                key: {{ include "mongo-express.secretKeyBasicAuthPassword" . }}
          {{- else }}
          - name: ME_CONFIG_BASICAUTH
            value: "false"
          {{- end }}
        livenessProbe:
          httpGet:
            path: "{{ .Values.siteBaseUrl | trimSuffix \"/\" }}/status"
        readinessProbe:
          httpGet:
            path: "{{ .Values.siteBaseUrl | trimSuffix \"/\" }}/status"
        startupProbe:
          httpGet:
            path: "{{ .Values.siteBaseUrl | trimSuffix \"/\" }}/status"
    image:
      registry: docker.io
      repository: mongo-express
      tag: 1.0.2
    ingress: true
    ingressPath: "{{ .Values.siteBaseUrl }}"
    secret: |
      {{- if .Values.mongodbEnableAdmin }}
      mongodb-admin-password: {{ .Values.mongodbAdminPassword | b64enc | quote }}
      {{- else }}
      mongodb-auth-password: {{ .Values.mongodbAuthPassword | b64enc | quote }}
      {{- end }}
      site-cookie-secret: {{ default (randAlphaNum 32) .Values.siteCookieSecret | b64enc | quote }}
      site-session-secret: {{ default (randAlphaNum 32) .Values.siteSessionSecret | b64enc | quote }}
      {{- if and .Values.basicAuthUsername .Values.basicAuthPassword }}
      basic-auth-password: {{ .Values.basicAuthPassword | b64enc | quote }}
      {{- end }}
    secretKeyHelpers: |
      {{/*
      Key in Secret that contains administrator password
      */}}
      {{- define "mongo-express.secretKeyMongodbAdminPassword" -}}
      {{- if .Values.existingSecret -}}
          {{ .Values.existingSecretKeyMongodbAdminPassword }}
      {{- else -}}
          mongodb-admin-password
      {{- end -}}
      {{- end -}}

      {{/*
      Key in Secret that contains database password
      */}}
      {{- define "mongo-express.secretKeyMongodbAuthPassword" -}}
      {{- if .Values.existingSecret -}}
          {{ .Values.existingSecretKeyMongodbAuthPassword }}
      {{- else -}}
          mongodb-auth-password
      {{- end -}}
      {{- end -}}

      {{/*
      Key in Secret that contains string used by cookie-parser middleware to sign cookies
      */}}
      {{- define "mongo-express.secretKeySiteCookieSecret" -}}
      {{- if .Values.existingSecret -}}
          {{ .Values.existingSecretKeySiteCookieSecret }}
      {{- else -}}
          site-cookie-secret
      {{- end -}}
      {{- end -}}

      {{/*
      Key in Secret that contains string used to sign the session ID cookie by express-session middleware
      */}}
      {{- define "mongo-express.secretKeySiteSessionSecret" -}}
      {{- if .Values.existingSecret -}}
          {{ .Values.existingSecretKeySiteSessionSecret }}
      {{- else -}}
          site-session-secret
      {{- end -}}
      {{- end -}}

      {{/*
      Key in Secret that contains Mongo Express web login password
      */}}
      {{- define "mongo-express.secretKeyBasicAuthPassword" -}}
      {{- if .Values.existingSecret -}}
          {{ .Values.existingSecretKeyBasicAuthPassword }}
      {{- else -}}
          basic-auth-password
      {{- end -}}
      {{- end -}}
    secretKeyValues: |
      ## @param existingSecretKeyMongodbAdminPassword Key in existing Secret that contains administrator password
      existingSecretKeyMongodbAdminPassword: mongodb-admin-password

      ## @param existingSecretKeyMongodbAuthPassword Key in existing Secret that contains database password
      existingSecretKeyMongodbAuthPassword: mongodb-auth-password

      ## @param existingSecretKeySiteCookieSecret Key in existing Secret that contains string used by cookie-parser middleware to sign cookies
      existingSecretKeySiteCookieSecret: site-cookie-secret

      ## @param existingSecretKeySiteSessionSecret Key in existing Secret that contains string used to sign the session ID cookie by express-session middleware
      existingSecretKeySiteSessionSecret: site-session-secret

      ## @param existingSecretKeyBasicAuthPassword Key in existing Secret that contains Mongo Express web login password
      existingSecretKeyBasicAuthPassword: basic-auth-password
    service:
      ports:
        - name: http
          number: 8081
          description: HTTP
    extraHelpers: |
      {{/*
      Create the basic authentification HTTP header
      */}}
      {{- define "mongo-express.basicAuthHttpHeader" -}}
      Basic {{ printf "%s:%s" .Values.basicAuthUsername .Values.basicAuthPassword | b64enc }}
      {{- end -}}
    extraValues: |
      ## @param mongodbServer MongoDB host name or IP address
      mongodbServer: mongodb

      ## @param mongodbPort MongoDB port
      mongodbPort: 27017

      ## @param mongodbEnableAdmin Enable administrator access
      mongodbEnableAdmin: false

      ## @param mongodbAdminUsername Administrator username
      mongodbAdminUsername: root

      ## @param mongodbAdminPassword Administrator password
      mongodbAdminPassword: ""

      ## @param mongodbAuthUsername Database username (only needed if `mongodbEnableAdmin` is `false`)
      mongodbAuthUsername: ""

      ## @param mongodbAuthPassword Database password (only needed if `mongodbEnableAdmin` is `false`)
      mongodbAuthPassword: ""

      ## @param mongodbAuthDatabase Database name (only needed if `mongodbEnableAdmin` is `false`)
      mongodbAuthDatabase: ""

      ## @param siteBaseUrl Set the express baseUrl to ease mounting at a subdirectory
      siteBaseUrl: /

      ## @param siteCookieSecret String used by cookie-parser middleware to sign cookies (Random 32 character long alphanumeric string if not set)
      siteCookieSecret: ""

      ## @param siteSessionSecret String used to sign the session ID cookie by express-session middleware (Random 32 character long alphanumeric string if not set)
      siteSessionSecret: ""

      ## @param basicAuthUsername Mongo Express web login name
      basicAuthUsername: ""

      ## @param basicAuthPassword Mongo Express web login password
      basicAuthPassword: ""
mongodb: test
tests: |
  import requests


  def test_service_connection():
      url = "http://{{ include "mongo-express.fullname" . }}:{{ .Values.service.ports.http }}{{ .Values.siteBaseUrl }}"

      response = requests.get(url)

      assert response.status_code == 200
