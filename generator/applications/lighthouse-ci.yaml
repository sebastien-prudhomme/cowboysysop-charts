name: lighthouse-ci
productName: Lighthouse CI Server
appVersion: 0.8.1
description: <<enables running a server to display Lighthouse CI results>>
home: https://github.com/GoogleChrome/lighthouse-ci
icon: https://raw.githubusercontent.com/GoogleChrome/lighthouse-ci/master/packages/server/src/ui/logo.svg
source: https://github.com/GoogleChrome/lighthouse-ci
version: 6.0.0
prerequisites: |
  - Kubernetes >= 1.19
updates: |
  ### Upgrading to version 6.0.0

  Some parameters related to port management have been modified:

  - Parameter `service.port` has been renamed `service.ports.http`.
  - Parameter `service.nodePort` has been renamed `service.nodePorts.http`.

  ### Upgrading to version 5.0.0

  Some parameters related to image management have been modified:

  - Registry prefix in `image.repository` parameters is now configured in `image.registry`.
  - Parameter `imagePullSecrets` has been renamed `global.imagePullSecrets`.

  ### Upgrading to version 4.0.0

  The PostgreSQL subchart has been updated to a major release, see these upgrade instructions:

  - https://github.com/bitnami/charts/tree/main/bitnami/postgresql#to-1200
  - https://docs.bitnami.com/kubernetes/infrastructure/postgresql/administration/upgrade/#to-1100

  ### Upgrading to version 3.0.0

  The MariaDB subchart has been updated to a major release, see these upgrade instructions:

  - https://github.com/bitnami/charts/tree/master/bitnami/mariadb#to-1100
  - https://github.com/bitnami/charts/tree/master/bitnami/mariadb#to-1000

  ### Upgrading to version 2.0.0

  The chart is no more compatible with Helm 2.

  Refer to the [Helm documentation](https://helm.sh/docs/topics/v2_v3_migration/) for more information.
components:
  - name: lighthouse-ci
    configmap: |
      lighthouserc.json: |
        {
          "ci": {
            "server": {
              "port": 9001,
              "storage": {
                "storageMethod": "sql",
                "sqlDialect": "sqlite",
                "sqlDatabasePath": "/data/lhci.db"
              },
              "psiCollectCron": {
                "psiApiKey": {{ .Values.psiCollectCron.psiApiKey | quote }},
                "sites": {{ .Values.psiCollectCron.sites | toJson }}
              },
              "deleteOldBuildsCron": {{ .Values.deleteOldBuildsCron | toJson }}
            }
          }
        }
    deployment:
      type: deployment
      container:
        env: |
            - name: LHCI_LOG_LEVEL
              value: {{ .Values.logLevel | quote }}
            {{- if and .Values.basicAuthUsername .Values.basicAuthPassword }}
            - name: LHCI_BASIC_AUTH__USERNAME
              value: {{ .Values.basicAuthUsername | quote }}
            - name: LHCI_BASIC_AUTH__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "lighthouse-ci.secretName" . }}
                  key: {{ include "lighthouse-ci.secretKeyNameBasicAuthPassword" . }}
            {{- end }}
            {{- if or .Values.mariadb.enabled .Values.externalMariadb.enabled }}
            - name: LHCI_STORAGE__SQL_DIALECT
              value: mysql
            - name: MARIADB_HOST
              value: {{ include "lighthouse-ci.mariadb.host" . | quote }}
            - name: MARIADB_PORT
              value: {{ include "lighthouse-ci.mariadb.port" . | quote }}
            - name: MARIADB_USERNAME
              value: {{ include "lighthouse-ci.mariadb.username" . | quote }}
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "lighthouse-ci.mariadb.secretName" . }}
                  key: {{ include "lighthouse-ci.mariadb.secretKeyNamePassword" . }}
            - name: MARIADB_DATABASE
              value: {{ include "lighthouse-ci.mariadb.database" . | quote }}
            - name: LHCI_STORAGE__SQL_CONNECTION_URL
              value: "mysql://$(MARIADB_USERNAME):$(MARIADB_PASSWORD)@$(MARIADB_HOST):$(MARIADB_PORT)/$(MARIADB_DATABASE)"
            {{- end }}
            {{- if or .Values.postgresql.enabled .Values.externalPostgresql.enabled }}
            - name: LHCI_STORAGE__SQL_DIALECT
              value: postgres
            - name: POSTGRESQL_HOST
              value: {{ include "lighthouse-ci.postgresql.host" . | quote }}
            - name: POSTGRESQL_PORT
              value: {{ include "lighthouse-ci.postgresql.port" . | quote }}
            - name: POSTGRESQL_USERNAME
              value: {{ include "lighthouse-ci.postgresql.username" . | quote }}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "lighthouse-ci.postgresql.secretName" . }}
                  key: {{ include "lighthouse-ci.postgresql.secretKeyNamePassword" . }}
            - name: POSTGRESQL_DATABASE
              value: {{ include "lighthouse-ci.postgresql.database" . | quote }}
            - name: LHCI_STORAGE__SQL_CONNECTION_URL
              value: "postgres://$(POSTGRESQL_USERNAME):$(POSTGRESQL_PASSWORD)@$(POSTGRESQL_HOST):$(POSTGRESQL_PORT)/$(POSTGRESQL_DATABASE)"
        livenessProbe:
          httpGet:
            path: /healthz
        readinessProbe:
          httpGet:
            path: /healthz
        volumeMounts: |
          - name: config
            mountPath: /usr/src/lhci/lighthouserc.json
            subPath: lighthouserc.json
          - name: data
            mountPath: /data
    image:
      registry: docker.io
      repository: tuxgasy/lighthouse-ci
      tag: 15.0.3
    ingress: true
    persistentvolumeclaim: true
    secret: |
      {{- if and .Values.basicAuthUsername .Values.basicAuthPassword }}
      basic-auth-password: {{ .Values.basicAuthPassword | b64enc | quote }}
      {{- end }}
    service:
      ports:
        - name: http
          number: 9001
          description: HTTP
    extraValues: |
      ## @param logLevel Log level
      logLevel: verbose

      ## @param basicAuthUsername The username to protect the server with HTTP Basic Authentication
      basicAuthUsername: ""

      ## @param basicAuthPassword The password to protect the server with HTTP Basic Authentication
      basicAuthPassword: ""

      ## @param existingSecretKeyBasicAuthPassword Name of the key in existing Secret that contains HTTP Basic Authentication password
      existingSecretKeyBasicAuthPassword: basic-auth-password

      ## @extra psiCollectCron The configuration to automatically collect results using the PageSpeed Insights API
      psiCollectCron:
        ## @param psiCollectCron.psiApiKey The API key to use with the PageSpeed Insights API
        psiApiKey: ""

        ## @param psiCollectCron.sites The array of sites to collect results for
        sites: []
          # - urls:
          #     - http://example.local/
          #   schedule: 0 * * * *
          #   projectSlug: example

      ## @param deleteOldBuildsCron The configuration to automatically delete old records
      deleteOldBuildsCron: []
        # - schedule: 0 * * * *
        #   maxAgeInDays: 30
mariadb: optional
postgresql: optional
tests: |
  import requests


  def test_service_connection():
      url = "http://{{ include "lighthouse-ci.fullname" . }}:{{ .Values.service.ports.http }}/"

      response = requests.get(url)

      assert response.status_code == 200
