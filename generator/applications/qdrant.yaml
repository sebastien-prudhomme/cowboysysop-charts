name: qdrant
productName: Qdrant
appVersion: 1.3.1
description: is a <<vector similarity search engine and vector database>>
home: https://qdrant.tech/
icon: https://raw.githubusercontent.com/cowboysysop/charts/master/charts/qdrant/icon.png
license: 2023
source: https://github.com/qdrant/qdrant
version: 1.2.1
prerequisites: |
  - Kubernetes >= 1.19
components:
  - name: qdrant
    configmap: |
      production.yaml: |
        service:
          http_port: {{ .Values.containerPorts.http }}
          grpc_port: {{ .Values.containerPorts.grpc }}
        cluster:
          enabled: true
          p2p:
            port: {{ .Values.containerPorts.p2p }}
        telemetry_disabled: true
    deployment:
      type: statefulset
      container:
        command: |
          - /bin/bash
          - -ec
          - |
            args="--uri http://${POD_NAME}.{{ include "qdrant.headless.fullname" . }}:{{ .Values.containerPorts.p2p }}/"
            if [ "${POD_NAME}" != "{{ include "qdrant.fullname" . }}-0" ]; then
                args="${args} --bootstrap http://{{ include "qdrant.fullname" . }}-0.{{ include "qdrant.headless.fullname" . }}:{{ .Values.containerPorts.p2p }}/"

                # With current tick period of 100ms, leader will be established in approximately 4000ms.
                # To avoid rejected operations - add peers and submit operations only after this period.
                sleep 4
            fi
            ./entrypoint.sh "${args}" "$@"
          - $@
        env: |
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        livenessProbe:
          httpGet:
            path: /
        readinessProbe:
          httpGet:
            path: /
        volumeMounts: |
          - name: config
            mountPath: /qdrant/config/production.yaml
            subPath: production.yaml
          - name: data
            mountPath: /qdrant/storage
            subPath: storage
          - name: data
            mountPath: /qdrant/snapshots
            subPath: snapshots
    image:
      registry: docker.io
      repository: qdrant/qdrant
      tag: v1.3.1
    ingress: true
    persistentvolumeclaim: true
    service:
      ports:
        - name: http
          number: 6333
          description: HTTP
        - name: grpc
          number: 6334
          description: gRPC
    headless:
      ports:
        - name: p2p
          nameIstio: tcp-p2p
          number: 6335
          description: P2P
tests: |
  import requests


  def test_service_connection():
      url = "http://{{ include "qdrant.fullname" . }}:{{ .Values.service.ports.http }}/"

      response = requests.get(url)

      assert response.status_code == 200
