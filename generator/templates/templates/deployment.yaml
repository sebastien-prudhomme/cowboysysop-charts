[% if component.name == application.name %]
[% set component_values_path = "." %]
[% set component_file_path = "/" %]
[% else %]
[% set component_values_path = component.name | to_lower_camel %]
[% set component_values_path = "." + component_values_path + "." %]
[% set component_file_path = "/" + component.name + "/" %]
[% endif %]
[% if component.optional %]
{{- if .Values[[ component_values_path ]]enabled }}
[% endif %]
[% if component.deployment.type == "deployment" %]
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
[% elif component.deployment.type == "statefulset" %]
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
[% endif %]
metadata:
  name: {{ include "[[ application.name ]][[ component_values_path ]]fullname" . }}
  labels:
    {{- include "[[ application.name ]][[ component_values_path ]]labels" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations:
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values[[ component_values_path ]]replicaCount }}
  selector:
    matchLabels:
      {{- include "[[ application.name ]][[ component_values_path ]]selectorLabels" . | nindent 6 }}
  [% if component.deployment.type == "statefulset" %]
  serviceName: {{ include "[[ application.name ]][[ component_values_path ]]headless.fullname" . }}
  [% endif %]
  [% if component.deployment.type == "deployment" and component.persistentvolumeclaim %]
  {{- if .Values[[ component_values_path ]]updateStrategy }}
  strategy: {{- toYaml .Values[[ component_values_path ]]updateStrategy | nindent 4 }}
  {{- end }}
  [% endif %]
  template:
    metadata:
      labels:
        {{- include "[[ application.name ]][[ component_values_path ]]selectorLabels" . | nindent 8 }}
        {{- if .Values[[ component_values_path ]]podLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values[[ component_values_path ]]podLabels "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
      [% if not component.configmap and not component.secret and not component.tls %]
      {{- if or .Values[[ component_values_path ]]podAnnotations .Values.commonAnnotations }}
      [% endif %]
      annotations:
        [% if component.configmap %]
        checksum/configmap: {{ include (print $.Template.BasePath "[[ component_file_path ]]configmap.yaml") . | sha256sum }}
        [% endif %]
        [% if component.secret %]
        {{- if (not .Values[[ component_values_path ]]existingSecret) }}
        checksum/secret: {{ include (print $.Template.BasePath "[[ component_file_path ]]secret.yaml") . | sha256sum }}
        {{- end }}
        [% endif %]
        [% if component.tls %]
        {{- if (not .Values[[ component_values_path ]]tls.existingSecret) }}
        checksum/tls-secret: {{ include (print $.Template.BasePath "[[ component_file_path ]]tls-secret.yaml") . | sha256sum }}
        {{- end }}
        [% endif %]
        {{- if .Values[[ component_values_path ]]podAnnotations }}
        {{- include "common.tplvalues.render" ( dict "value" .Values[[ component_values_path ]]podAnnotations "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.commonAnnotations }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 8 }}
        {{- end }}
      [% if not component.configmap and not component.secret and not component.tls %]
      {{- end }}
      [% endif %]
    spec:
      {{- include "common.images.pullSecrets" ( dict "images" ( list .Values[[ component_values_path ]]image ) "global" .Values.global ) | nindent 6 }}
      {{- if .Values[[ component_values_path ]]priorityClassName }}
      priorityClassName: {{ .Values[[ component_values_path ]]priorityClassName | quote }}
      {{- end }}
      serviceAccountName: {{ include "[[ application.name ]][[ component_values_path ]]serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values[[ component_values_path ]]podSecurityContext | nindent 8 }}
      [% if component.deployment.initContainer %]
      initContainers:
        - name: init
          securityContext:
            {{- toYaml .Values[[ component_values_path ]]init.securityContext | nindent 12 }}
          image: {{ include "common.images.image" ( dict "imageRoot" .Values[[ component_values_path ]]image "global" .Values.global ) }}
          imagePullPolicy: {{ .Values[[ component_values_path ]]image.pullPolicy }}
          [% if component.deployment.initContainer.command %]
          command:
            [[ component.deployment.initContainer.command | indent(12) | trim ]]
          [% endif %]
          resources:
            {{- toYaml .Values[[ component_values_path ]]init.resources | nindent 12 }}
          [% if component.deployment.initContainer.volumeMounts %]
          volumeMounts:
            [[ component.deployment.initContainer.volumeMounts | indent(12) | trim ]]
          [% endif %]
      [% endif %]
      containers:
        - name: [[ component.name ]]
          securityContext:
            {{- toYaml .Values[[ component_values_path ]]securityContext | nindent 12 }}
          image: {{ include "common.images.image" ( dict "imageRoot" .Values[[ component_values_path ]]image "global" .Values.global ) }}
          imagePullPolicy: {{ .Values[[ component_values_path ]]image.pullPolicy }}
          [% if component.deployment.container.command %]
          command:
            [[ component.deployment.container.command | indent(12) | trim ]]
          [% endif %]
          [% if not component.deployment.container.args %]
          {{- if .Values[[ component_values_path ]]extraArgs }}
          [% endif %]
          args:
            [% if component.deployment.container.args %]
            [[ component.deployment.container.args | indent(12) | trim ]]
            [% endif %]
            {{- range $key, $value := .Values[[ component_values_path ]]extraArgs }}
            - --{{ $key }}={{ $value }}
            {{- end }}
          [% if not component.deployment.container.args %]
          {{- end }}
          [% endif %]
          [% if not component.deployment.container.env %]
          {{- if .Values[[ component_values_path ]]extraEnvVars }}
          [% endif %]
          env:
            [% if component.deployment.container.env %]
            [[ component.deployment.container.env | indent(12) | trim ]]
            {{- if .Values[[ component_values_path ]]extraEnvVars }}
            [% endif %]
            {{- include "common.tplvalues.render" (dict "value" .Values[[ component_values_path ]]extraEnvVars "context" $) | nindent 12 }}
            [% if component.deployment.container.env %]
            {{- end }}
            [% endif %]
          [% if not component.deployment.container.env %]
          {{- end }}
          [% endif %]
          {{- if or .Values[[ component_values_path ]]extraEnvVarsCM .Values[[ component_values_path ]]extraEnvVarsSecret }}
          envFrom:
            {{- if .Values[[ component_values_path ]]extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values[[ component_values_path ]]extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values[[ component_values_path ]]extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values[[ component_values_path ]]extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- end }}
          [% if component.service or component.headless or component.metrics %]
          ports:
            [% set ports = [] %]
            [% if component.service %]
            [% set ports = ports + component.service.ports %]
            [% endif %]
            [% if component.headless %]
            [% set ports = ports + component.headless.ports %]
            [% endif %]
            [% if component.metrics %]
            [% set ports = ports + component.metrics.ports %]
            [% endif %]
            [% for port in ports %]
            - name: [[ port.nameContainer or port.name ]]
              containerPort: {{ .Values[[ component_values_path ]]containerPorts.[[ port.name ]] }}
              protocol: TCP
            [% endfor %]
          [% endif %]
          {{- if .Values[[ component_values_path ]]livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: [[ component.deployment.container.livenessProbe.httpGet.path ]]
              port: [[ component.deployment.container.livenessProbe.httpGet.port or "http" ]]
              [% if component.deployment.container.livenessProbe.httpGet.extra %]
              [[ component.deployment.container.livenessProbe.httpGet.extra | indent(14) | trim ]]
              [% endif %]
            initialDelaySeconds: {{ .Values[[ component_values_path ]]livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values[[ component_values_path ]]livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values[[ component_values_path ]]livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values[[ component_values_path ]]livenessProbe.failureThreshold }}
            successThreshold: {{ .Values[[ component_values_path ]]livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values[[ component_values_path ]]readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: [[ component.deployment.container.readinessProbe.httpGet.path ]]
              port: [[ component.deployment.container.readinessProbe.httpGet.port or "http" ]]
              [% if component.deployment.container.readinessProbe.httpGet.extra %]
              [[ component.deployment.container.readinessProbe.httpGet.extra | indent(14) | trim ]]
              [% endif %]
            initialDelaySeconds: {{ .Values[[ component_values_path ]]readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values[[ component_values_path ]]readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values[[ component_values_path ]]readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values[[ component_values_path ]]readinessProbe.failureThreshold }}
            successThreshold: {{ .Values[[ component_values_path ]]readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values[[ component_values_path ]]startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: [[ component.deployment.container.startupProbe.httpGet.path ]]
              port: [[ component.deployment.container.startupProbe.httpGet.port or "http" ]]
              [% if component.deployment.container.startupProbe.httpGet.extra %]
              [[ component.deployment.container.startupProbe.httpGet.extra | indent(14) | trim ]]
              [% endif %]
            initialDelaySeconds: {{ .Values[[ component_values_path ]]startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values[[ component_values_path ]]startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values[[ component_values_path ]]startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values[[ component_values_path ]]startupProbe.failureThreshold }}
            successThreshold: {{ .Values[[ component_values_path ]]startupProbe.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values[[ component_values_path ]]resources | nindent 12 }}
          [% if component.deployment.container.volumeMounts %]
          volumeMounts:
            [[ component.deployment.container.volumeMounts | indent(12) | trim ]]
          [% endif %]
        [% for container in component.deployment.containers %]
        [% if container.asComponent %]
        [% set standard_values_path = "." + container.name + "." %]
        [% set custom_values_path = "." + container.name + "." %]
        [% else %]
        [% set standard_values_path = "." %]
        [% set custom_values_path = "." + application.name + "." + container.name + "." %]
        [% endif %]
        [% if container.optional %]
        {{- if .Values[[ custom_values_path ]]enabled }}
        [% endif %]
        - name: [[ container.name ]]
          securityContext:
            {{- toYaml .Values[[ standard_values_path ]]securityContext | nindent 12 }}
          image: {{ include "common.images.image" ( dict "imageRoot" .Values[[ standard_values_path ]]image "global" .Values.global ) }}
          imagePullPolicy: {{ .Values[[ standard_values_path ]]image.pullPolicy }}
          [% if not container.args %]
          {{- if .Values[[ standard_values_path ]]extraArgs }}
          [% endif %]
          args:
            [% if container.args %]
            [[ container.args | indent(12) | trim ]]
            [% endif %]
            {{- range $key, $value := .Values[[ standard_values_path ]]extraArgs }}
            - --{{ $key }}={{ $value }}
            {{- end }}
          [% if not container.args %]
          {{- end }}
          [% endif %]
          [% if not container.env %]
          {{- if .Values[[ standard_values_path ]]extraEnvVars }}
          [% endif %]
          env:
            [% if container.env %]
            [[ container.env | indent(12) | trim ]]
            {{- if .Values[[ standard_values_path ]]extraEnvVars }}
            [% endif %]
            {{- include "common.tplvalues.render" (dict "value" .Values[[ standard_values_path ]]extraEnvVars "context" $) | nindent 12 }}
            [% if container.env %]
            {{- end }}
            [% endif %]
          [% if not container.env %]
          {{- end }}
          [% endif %]
          {{- if or .Values[[ standard_values_path ]]extraEnvVarsCM .Values[[ standard_values_path ]]extraEnvVarsSecret }}
          envFrom:
            {{- if .Values[[ standard_values_path ]]extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values[[ standard_values_path ]]extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values[[ standard_values_path ]]extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values[[ standard_values_path ]]extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- end }}
          [% if container.ports %]
          ports:
            [% for port in container.ports %]
            - name: [[ port.nameContainer or port.name ]]
              containerPort: {{ .Values[[ standard_values_path ]]containerPorts.[[ port.name ]] }}
              protocol: TCP
            [% endfor %]
          [% endif %]
          resources:
            {{- toYaml .Values[[ standard_values_path ]]resources | nindent 12 }}
          [% if container.volumeMounts %]
          volumeMounts:
            [[ container.volumeMounts | indent(12) | trim ]]
          [% endif %]
        [% if container.optional %]
        {{- end }}
        [% endif %]
        [% endfor %]
      {{- with .Values[[ component_values_path ]]nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values[[ component_values_path ]]affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values[[ component_values_path ]]tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      [% if component.configmap or component.persistentvolumeclaim or component.tls %]
      volumes:
        [% if component.configmap %]
        - name: config
          configMap:
            name: {{ include "[[ application.name ]][[ component_values_path ]]fullname" . }}
        [% endif %]
        [% if component.persistentvolumeclaim %]
        [% if component.deployment.type == "deployment" %]
        - name: data
          {{- if .Values[[ component_values_path ]]persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default (include "[[ application.name ]][[ component_values_path ]]fullname" .) .Values[[ component_values_path ]]persistence.existingClaim }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        [% elif component.deployment.type == "statefulset" %]
        {{- if not .Values[[ component_values_path ]]persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
        [% endif %]
        [% endif %]
        [% if component.tls %]
        - name: tls-secret
          secret:
            secretName: {{ include "[[ application.name ]][[ component_values_path ]]tls.secretName" . }}
        [% endif %]
      [% endif %]
  [% if component.deployment.type == "statefulset" and component.persistentvolumeclaim %]
  {{- if .Values[[ component_values_path ]]persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "[[ application.name ]][[ component_values_path ]]labels" . | nindent 10 }}
          {{- if .Values.commonLabels }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 10 }}
          {{- end }}
        {{- if or .Values[[ component_values_path ]]persistence.annotations .Values.commonAnnotations }}
        annotations:
          {{- if .Values[[ component_values_path ]]persistence.annotations }}
          {{- include "common.tplvalues.render" ( dict "value" .Values[[ component_values_path ]]persistence.annotations "context" $ ) | nindent 10 }}
          {{- end }}
          {{- if .Values.commonAnnotations }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 10 }}
          {{- end }}
        {{- end }}
      spec:
        accessModes:
          - {{ .Values[[ component_values_path ]]persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values[[ component_values_path ]]persistence.size | quote }}
        {{- if .Values[[ component_values_path ]]persistence.storageClass }}
        {{- if (eq "-" .Values[[ component_values_path ]]persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .Values[[ component_values_path ]]persistence.storageClass | quote }}
        {{- end }}
        {{- end }}
  {{- end }}
  [% endif %]
[% if component.optional %]
{{- end }}
[% endif %]
