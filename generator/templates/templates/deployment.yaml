[%- if component.deployment.type == "deployment" -%]
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
[%- elif component.deployment.type == "statefulset" -%]
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
[%- endif %]
metadata:
  name: {{ include "[[ application.name ]].fullname" . }}
  labels:
    {{- include "[[ application.name ]].labels" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations:
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "[[ application.name ]].selectorLabels" . | nindent 6 }}
  [%- if component.deployment.type == "statefulset" %]
  serviceName: {{ include "[[ application.name ]].headless.fullname" . }}
  [%- endif %]
  [%- if component.deployment.type == "deployment" and component.persistentvolumeclaim %]
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  [%- endif %]
  template:
    metadata:
      labels:
        {{- include "[[ application.name ]].selectorLabels" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.podLabels "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
      [%- if not component.configmap and not component.secret %]
      {{- if or .Values.podAnnotations .Values.commonAnnotations }}
      [%- endif %]
      annotations:
        [%- if component.configmap %]
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        [%- endif %]
        [%- if component.secret %]
        {{- if (not .Values.existingSecret) }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
        [%- endif %]
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.podAnnotations "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.commonAnnotations }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 8 }}
        {{- end }}
      [%- if not component.configmap and not component.secret %]
      {{- end }}
      [%- endif %]
    spec:
      {{- include "common.images.pullSecrets" ( dict "images" ( list .Values.image ) "global" .Values.global ) | nindent 6 }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      serviceAccountName: {{ include "[[ application.name ]].serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      [%- if component.deployment.initContainer %]
      initContainers:
        - name: init
          securityContext:
            {{- toYaml .Values.init.securityContext | nindent 12 }}
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.image "global" .Values.global ) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          [%- if component.deployment.initContainer.command %]
          command:
            [[ component.deployment.initContainer.command | indent(12) | trim ]]
          [%- endif %]
          resources:
            {{- toYaml .Values.init.resources | nindent 12 }}
          [%- if component.deployment.initContainer.volumeMounts %]
          volumeMounts:
            [[ component.deployment.initContainer.volumeMounts | indent(12) | trim ]]
          [%- endif %]
      [%- endif %]
      containers:
        - name: [[ application.name ]]
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.image "global" .Values.global ) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          [%- if component.deployment.container.command %]
          command:
            [[ component.deployment.container.command | indent(12) | trim ]]
          [%- endif %]
          [%- if not component.deployment.container.args %]
          {{- if .Values.extraArgs }}
          [%- endif %]
          args:
            [%- if component.deployment.container.args %]
            [[ component.deployment.container.args | indent(12) | trim ]]
            [%- endif %]
            {{- range $key, $value := .Values.extraArgs }}
            - --{{ $key }}={{ $value }}
            {{- end }}
          [%- if not component.deployment.container.args %]
          {{- end }}
          [%- endif %]
          [%- if not component.deployment.container.env %]
          {{- if .Values.extraEnvVars }}
          [%- endif %]
          env:
            [%- if component.deployment.container.env %]
            [[ component.deployment.container.env | indent(12) | trim ]]
            {{- if .Values.extraEnvVars }}
            [%- endif %]
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            [%- if component.deployment.container.env %]
            {{- end }}
            [%- endif %]
          [%- if not component.deployment.container.env %]
          {{- end }}
          [%- endif %]
          {{- if or .Values.extraEnvVarsCM .Values.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- end }}
          ports:
            [%- set ports = component.service.ports %]
            [%- if component.headless %]
            [%- set ports = ports + component.headless.ports %]
            [%- endif %]
            [%- for port in ports %]
            - name: [[ port.nameIstio or port.name ]]
              containerPort: {{ .Values.containerPorts.[[ port.name ]] }}
              protocol: TCP
            [%- endfor %]
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: [[ component.deployment.container.livenessProbe.httpGet.path ]]
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: [[ component.deployment.container.readinessProbe.httpGet.path ]]
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          [%- if component.deployment.container.volumeMounts %]
          volumeMounts:
            [[ component.deployment.container.volumeMounts | indent(12) | trim ]]
          [%- endif %]
        [%- for container in component.deployment.containers %]
        [%- if container.asComponent %]
        [%- set values_path = container.name + "." %]
        [%- else %]
        [%- set values_path = "" %]
        [%- endif %]
        [%- if container.optional %]
        {{- if .Values.[[ application.name ]].[[ container.name ]].enabled }}
        [%- endif %]
        - name: [[ container.name ]]
          securityContext:
            {{- toYaml .Values.[[ values_path ]]securityContext | nindent 12 }}
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.[[ values_path ]]image "global" .Values.global ) }}
          imagePullPolicy: {{ .Values.[[ values_path ]]image.pullPolicy }}
          [%- if not container.args %]
          {{- if .Values.[[ values_path ]]extraArgs }}
          [%- endif %]
          args:
            [%- if container.args %]
            [[ container.args | indent(12) | trim ]]
            [%- endif %]
            {{- range $key, $value := .Values.[[ values_path ]]extraArgs }}
            - --{{ $key }}={{ $value }}
            {{- end }}
          [%- if not container.args %]
          {{- end }}
          [%- endif %]
          [%- if not container.env %]
          {{- if .Values.[[ values_path ]]extraEnvVars }}
          [%- endif %]
          env:
            [%- if container.env %]
            [[ container.env | indent(12) | trim ]]
            {{- if .Values.[[ values_path ]]extraEnvVars }}
            [%- endif %]
            {{- include "common.tplvalues.render" (dict "value" .Values.[[ values_path ]]extraEnvVars "context" $) | nindent 12 }}
            [%- if container.env %]
            {{- end }}
            [%- endif %]
          [%- if not container.env %]
          {{- end }}
          [%- endif %]
          {{- if or .Values.[[ values_path ]]extraEnvVarsCM .Values.[[ values_path ]]extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.[[ values_path ]]extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.[[ values_path ]]extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.[[ values_path ]]extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.[[ values_path ]]extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- end }}
          [%- if container.ports %]
          ports:
            [%- for port in container.ports %]
            - name: [[ port.nameIstio or port.name ]]
              containerPort: {{ .Values.[[ values_path ]]containerPorts.[[ port.name ]] }}
              protocol: TCP
            [%- endfor %]
          [%- endif %]
          resources:
            {{- toYaml .Values.[[ values_path ]]resources | nindent 12 }}
          [%- if container.volumeMounts %]
          volumeMounts:
            [[ container.volumeMounts | indent(12) | trim ]]
          [%- endif %]
        [%- if container.optional %]
        {{- end }}
        [%- endif %]
        [%- endfor %]
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      [%- if component.configmap or component.persistentvolumeclaim %]
      volumes:
        [%- if component.configmap %]
        - name: config
          configMap:
            name: {{ include "[[ application.name ]].fullname" . }}
        [%- endif %]
        [%- if component.persistentvolumeclaim %]
        [%- if component.deployment.type == "deployment" %]
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default (include "[[ application.name ]].fullname" .) .Values.persistence.existingClaim }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        [%- elif component.deployment.type == "statefulset" %]
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
        [%- endif %]
        [%- endif %]
      [%- endif %]
  [%- if component.deployment.type == "statefulset" and component.persistentvolumeclaim %]
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "[[ application.name ]].labels" . | nindent 10 }}
          {{- if .Values.commonLabels }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 10 }}
          {{- end }}
        {{- if or .Values.persistence.annotations .Values.commonAnnotations }}
        annotations:
          {{- if .Values.persistence.annotations }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.persistence.annotations "context" $ ) | nindent 10 }}
          {{- end }}
          {{- if .Values.commonAnnotations }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 10 }}
          {{- end }}
        {{- end }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        {{- end }}
  {{- end }}
  [%- endif %]
