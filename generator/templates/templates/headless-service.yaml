[% if component.name == application.name %]
[% set component_values_path = "." %]
[% else %]
[% set component_values_path = component.name | to_lower_camel %]
[% set component_values_path = "." + component_values_path + "." %]
[% endif %]
[% if component.optional %]
{{- if .Values[[ component_values_path ]]enabled }}
[% endif %]
apiVersion: v1
kind: Service
metadata:
  name: {{ include "[[ application.name ]][[ component_values_path ]]headless.fullname" . }}
  labels:
    {{- include "[[ application.name ]][[ component_values_path ]]labels" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if or .Values[[ component_values_path ]]headless.service.annotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" ( dict "values" ( list .Values[[ component_values_path ]]headless.service.annotations .Values.commonAnnotations ) "context" . ) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  type: ClusterIP
  clusterIP: None
  {{- if .Values[[ component_values_path ]]headless.service.ipFamilyPolicy }}
  ipFamilyPolicy: {{ .Values[[ component_values_path ]]headless.service.ipFamilyPolicy }}
  {{- end }}
  {{- if not (empty .Values[[ component_values_path ]]headless.service.ipFamilies)}}
  ipFamilies: {{- toYaml .Values[[ component_values_path ]]headless.service.ipFamilies | nindent 4 }}
  {{- end }}
  ports:
    [% for port in component.headless.ports %]
    - port: {{ .Values[[ component_values_path ]]headless.service.ports.[[ port.name ]] }}
      targetPort: [[ port.nameContainer or port.name ]]
      protocol: TCP
      name: [[ port.nameService or port.name ]]
    [% endfor %]
  publishNotReadyAddresses: true
  selector:
    {{- include "[[ application.name ]][[ component_values_path ]]selectorLabels" . | nindent 4 }}
[% if component.optional %]
{{- end }}
[% endif %]
