# Default values for [[ application.name ]].
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @section Global parameters

global:
  ## @param global.imageRegistry Global Docker image registry
  imageRegistry: ""

  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  imagePullSecrets: []

## @section Common parameters

## @param kubeVersion Override Kubernetes version
kubeVersion: ""

## @param nameOverride Partially override `[[ application.name ]].fullname` template with a string (will prepend the release name)
nameOverride: ""

## @param fullnameOverride Fully override `[[ application.name ]].fullname` template with a string
fullnameOverride: ""

## @param commonAnnotations Annotations to add to all deployed objects
commonAnnotations: {}

## @param commonLabels Labels to add to all deployed objects
commonLabels: {}

## @param extraDeploy Array of extra objects to deploy with the release
extraDeploy: []
[% for component in application.components %]

[% if component.name == application.name %]
[% set component_yaml_path = "" %]
[% set indent_width = 0 %]
## @section Parameters

[% else %]
[% set component_yaml_path = component.name | to_lower_camel %]
[% set component_yaml_path = component_yaml_path + "." %]
[% set indent_width = 2 %]
## @section [[ component.description ]] parameters

[[ component.name | to_lower_camel ]]:
[% endif %]
[% filter indent(width=indent_width) %]
[% if component.optional %]
## @param [[ component_yaml_path ]]enabled Enable the component
enabled: true

[% endif %]
[% if component.deployment.type == "deployment" and component.persistentvolumeclaim %]
[% set extra_comment = " (do not change it)" %]
[% else %]
[% set extra_comment = "" %]
[% endif %]
## @param [[ component_yaml_path ]]replicaCount Number of replicas[[ extra_comment ]]
replicaCount: 1
[% if component.deployment.type == "deployment" and component.persistentvolumeclaim %]

updateStrategy:
  ## @param [[ component_yaml_path ]]updateStrategy.type Update strategy type (do not change it)
  type: Recreate
[% endif %]

image:
  ## @param [[ component_yaml_path ]]image.registry Image registry
  registry: [[ component.image.registry ]]

  ## @param [[ component_yaml_path ]]image.repository Image repository
  repository: [[ component.image.repository ]]

  ## @param [[ component_yaml_path ]]image.tag Image tag
  tag: [[ component.image.tag ]]

  ## @param [[ component_yaml_path ]]image.digest Image digest
  digest: ""

  ## @param [[ component_yaml_path ]]image.pullPolicy Image pull policy
  pullPolicy: IfNotPresent

pdb:
  ## @param [[ component_yaml_path ]]pdb.create Specifies whether a pod disruption budget should be created
  create: false

  ## @param [[ component_yaml_path ]]pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
  minAvailable: 1

  ## @param [[ component_yaml_path ]]pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
  maxUnavailable:
  # maxUnavailable: 1

serviceAccount:
  ## @param [[ component_yaml_path ]]serviceAccount.create Specifies whether a service account should be created
  create: true

  ## @param [[ component_yaml_path ]]serviceAccount.annotations Service account annotations
  annotations: {}

  ## @param [[ component_yaml_path ]]serviceAccount.name The name of the service account to use (Generated using the `[[ application.name ]].fullname` template if not set)
  name:

## @param [[ component_yaml_path ]]podAnnotations Additional pod annotations
podAnnotations: {}

## @param [[ component_yaml_path ]]podLabels Additional pod labels
podLabels: {}

[% if component.deployment.podSecurityContext %]
## @extra [[ component_yaml_path ]]podSecurityContext Pod security context
[% if component.deployment.podSecurityContext.runAsNonRoot %]
## @param [[ component_yaml_path ]]podSecurityContext.runAsNonRoot Whether the container must run as a non-root user
[% endif %]
[% if component.deployment.podSecurityContext.runAsUser %]
## @param [[ component_yaml_path ]]podSecurityContext.runAsUser The UID to run the entrypoint of the container process
[% endif %]
podSecurityContext:
  # fsGroup: 2000
  [% if component.deployment.podSecurityContext.runAsNonRoot %]
  runAsNonRoot: [[ "true" if component.deployment.podSecurityContext.runAsNonRoot else "false" ]]
  [% endif %]
  [% if component.deployment.podSecurityContext.runAsUser %]
  runAsUser: [[ component.deployment.podSecurityContext.runAsUser ]]
  [% endif %]
[% else %]
## @param [[ component_yaml_path ]]podSecurityContext Pod security context
podSecurityContext: {}
  # fsGroup: 2000
[% endif %]

## @param [[ component_yaml_path ]]priorityClassName Priority class name
priorityClassName:
# priorityClassName : high-priority

## @param [[ component_yaml_path ]]securityContext Container security context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
[% if component.service or component.headless or component.metrics or component.deployment.container.ports %]

containerPorts:
  [% set ports = [] %]
  [% if component.service %]
  [% set ports = ports + component.service.ports %]
  [% endif %]
  [% if component.headless %]
  [% set ports = ports + component.headless.ports %]
  [% endif %]
  [% if component.metrics and component.metrics.ports %]
  [% set ports = ports + component.metrics.ports %]
  [% endif %]
  [% if component.deployment.container.ports %]
  [% set ports = ports + component.deployment.container.ports %]
  [% endif %]
  [% for port in ports %]
  [% if loop.index0 > 0 %]

  [% endif %]
  ## @param [[ component_yaml_path ]]containerPorts.[[ port.name ]] Container port for [[ port.description ]]
  [[ port.name ]]: [[ port.number ]]
  [% endfor %]
[% endif %]

livenessProbe:
  ## @param [[ component_yaml_path ]]livenessProbe.enabled Enable liveness probe
  enabled: true

  ## @param [[ component_yaml_path ]]livenessProbe.initialDelaySeconds Delay before the liveness probe is initiated
  initialDelaySeconds: [[ component.deployment.container.livenessProbe.initialDelaySeconds or 0 ]]

  ## @param [[ component_yaml_path ]]livenessProbe.periodSeconds How often to perform the liveness probe
  periodSeconds: 10

  ## @param [[ component_yaml_path ]]livenessProbe.timeoutSeconds When the liveness probe times out
  timeoutSeconds: 1

  ## @param [[ component_yaml_path ]]livenessProbe.failureThreshold Minimum consecutive failures for the liveness probe to be considered failed after having succeeded
  failureThreshold: 3

  ## @param [[ component_yaml_path ]]livenessProbe.successThreshold Minimum consecutive successes for the liveness probe to be considered successful after having failed
  successThreshold: 1

readinessProbe:
  ## @param [[ component_yaml_path ]]readinessProbe.enabled Enable readiness probe
  enabled: true

  ## @param [[ component_yaml_path ]]readinessProbe.initialDelaySeconds Delay before the readiness probe is initiated
  initialDelaySeconds: 0

  ## @param [[ component_yaml_path ]]readinessProbe.periodSeconds How often to perform the readiness probe
  periodSeconds: 10

  ## @param [[ component_yaml_path ]]readinessProbe.timeoutSeconds When the readiness probe times out
  timeoutSeconds: 1

  ## @param [[ component_yaml_path ]]readinessProbe.failureThreshold Minimum consecutive failures for the readiness probe to be considered failed after having succeeded
  failureThreshold: 3

  ## @param [[ component_yaml_path ]]readinessProbe.successThreshold Minimum consecutive successes for the readiness probe to be considered successful after having failed
  successThreshold: 1

startupProbe:
  ## @param [[ component_yaml_path ]]startupProbe.enabled Enable startup probe
  enabled: false

  ## @param [[ component_yaml_path ]]startupProbe.initialDelaySeconds Delay before the startup probe is initiated
  initialDelaySeconds: 0

  ## @param [[ component_yaml_path ]]startupProbe.periodSeconds How often to perform the startup probe
  periodSeconds: 10

  ## @param [[ component_yaml_path ]]startupProbe.timeoutSeconds When the startup probe times out
  timeoutSeconds: 1

  ## @param [[ component_yaml_path ]]startupProbe.failureThreshold Minimum consecutive failures for the startup probe to be considered failed after having succeeded
  failureThreshold: 3

  ## @param [[ component_yaml_path ]]startupProbe.successThreshold Minimum consecutive successes for the startup probe to be considered successful after having failed
  successThreshold: 1
[% if component.service %]

service:
  ## @param [[ component_yaml_path ]]service.annotations Service annotations
  annotations: {}

  ## @param [[ component_yaml_path ]]service.type Service type
  type: ClusterIP

  ## @param [[ component_yaml_path ]]service.clusterIP Static cluster IP address or None for headless service when service type is ClusterIP
  clusterIP:
  # clusterIP: 10.43.0.100
  [% if not component.service.internal %]

  ## @param [[ component_yaml_path ]]service.loadBalancerIP Static load balancer IP address when service type is LoadBalancer
  loadBalancerIP:
  # loadBalancerIP: 10.0.0.100

  ## @param [[ component_yaml_path ]]service.loadBalancerSourceRanges Source IP address ranges when service type is LoadBalancer
  loadBalancerSourceRanges:
    # - 10.0.0.0/24

  ## @param [[ component_yaml_path ]]service.externalTrafficPolicy External traffic routing policy when service type is LoadBalancer or NodePort
  externalTrafficPolicy: Cluster
  [% endif %]

  ports:
    [% for port in component.service.ports %]
    [% if loop.index0 > 0 %]

    [% endif %]
    [% if port.numberOverride %]
    [% set extra_comment = " (do not change it)" %]
    [% else %]
    [% set extra_comment = "" %]
    [% endif %]
    ## @param [[ component_yaml_path ]]service.ports.[[ port.name ]] Service port for [[ port.description ]][[ extra_comment ]]
    [[ port.name ]]: [[ port.numberOverride or port.number ]]
    [% endfor %]
  [% if not component.service.internal %]

  nodePorts:
    [% for port in component.service.ports %]
    [% if loop.index0 > 0 %]

    [% endif %]
    ## @param [[ component_yaml_path ]]service.nodePorts.[[ port.name ]] Service node port for [[ port.description ]] when service type is LoadBalancer or NodePort
    [[ port.name ]]:
    # [[ port.name ]]: [[ 30000 + loop.index0 ]]
    [% endfor %]
  [% endif %]
[% endif %]
[% if component.ingress %]

ingress:
  ## @param [[ component_yaml_path ]]ingress.enabled Enable ingress controller resource
  enabled: false

  ## @param [[ component_yaml_path ]]ingress.ingressClassName IngressClass that will be be used to implement the Ingress
  ingressClassName: ""

  ## @param [[ component_yaml_path ]]ingress.pathType Ingress path type
  pathType: ImplementationSpecific

  ## @param [[ component_yaml_path ]]ingress.annotations Ingress annotations
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"

  ## @param [[ component_yaml_path ]]ingress.hosts[0].host Hostname to your [[ application.productName ]] installation
  ## @param [[ component_yaml_path ]]ingress.hosts[0].paths Paths within the url structure
  hosts:
    - host: [[ application.name ]].local
      paths:
        - /

  ## @param [[ component_yaml_path ]]ingress.tls TLS configuration
  tls: []
    # - secretName: [[ application.name ]]-tls
    #   hosts:
    #     - [[ application.name ]].local
[% endif %]

## @param [[ component_yaml_path ]]resources CPU/Memory resource requests/limits
resources: {}
  # limits:
  #   cpu: [[ component.deployment.container.resources.limits.cpu if component.deployment.container.resources else "100m" ]]
  #   memory: [[ component.deployment.container.resources.limits.memory if component.deployment.container.resources else "128Mi" ]]
  # requests:
  #   cpu: [[ component.deployment.container.resources.requests.cpu if component.deployment.container.resources else "100m" ]]
  #   memory: [[ component.deployment.container.resources.requests.memory if component.deployment.container.resources else "128Mi" ]]

## @param [[ component_yaml_path ]]nodeSelector Node labels for pod assignment
nodeSelector: {}

## @param [[ component_yaml_path ]]tolerations Tolerations for pod assignment
tolerations: []

## @param [[ component_yaml_path ]]affinity Map of node/pod affinities
affinity: {}

[% if component.deployment.container.extraArgs %]
## @extra [[ component_yaml_path ]]extraArgs [object] Additional container arguments
[[ component.deployment.container.extraArgsDoc | trim ]]
extraArgs:
  [[ component.deployment.container.extraArgs | indent(2) | trim ]]
[% else %]
## @param [[ component_yaml_path ]]extraArgs Additional container arguments
extraArgs: {}
  # name: ""
[% endif %]

## @param [[ component_yaml_path ]]extraEnvVars Additional container environment variables
extraEnvVars: []
  # - name: MY-NAME
  #   value: "MY-VALUE"

## @param [[ component_yaml_path ]]extraEnvVarsCM Name of existing ConfigMap containing additional container environment variables
extraEnvVarsCM:

## @param [[ component_yaml_path ]]extraEnvVarsSecret Name of existing Secret containing additional container environment variables
extraEnvVarsSecret:
[% if component.deployment.initContainer %]

init:
  ## @param [[ component_yaml_path ]]init.securityContext Init security context
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  ## @param [[ component_yaml_path ]]init.resources Init CPU/Memory resource requests/limits
  resources: {}
    # limits:
    #   cpu: [[ component.deployment.initContainer.resources.limits.cpu if component.deployment.initContainer.resources else "100m" ]]
    #   memory: [[ component.deployment.initContainer.resources.limits.memory if component.deployment.initContainer.resources else "128Mi" ]]
    # requests:
    #   cpu: [[ component.deployment.initContainer.resources.requests.cpu if component.deployment.initContainer.resources else "100m" ]]
    #   memory: [[ component.deployment.initContainer.resources.requests.memory if component.deployment.initContainer.resources else "128Mi" ]]
[% endif %]
[% for container in component.deployment.containers %]
[% if container.asComponent %]

## @section [[ container.description ]] parameters

[[ container.name ]]:
  [% if container.optional %]
  ## @param [[ container.name ]].enabled Enable [[ container.description ]]
  enabled: true

  [% endif %]
  image:
    ## @param [[ container.name ]].image.registry Image registry
    registry: [[ container.image.registry or component.image.registry ]]

    ## @param [[ container.name ]].image.repository Image repository
    repository: [[ container.image.repository or component.image.repository ]]

    ## @param [[ container.name ]].image.tag Image tag
    tag: [[ container.image.tag or component.image.tag ]]

    ## @param [[ container.name ]].image.digest Image digest
    digest: ""

    ## @param [[ container.name ]].image.pullPolicy Image pull policy
    pullPolicy: IfNotPresent

  ## @param [[ container.name ]].securityContext Container security context
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  [% if container.ports %]

  containerPorts:
    [% for port in container.ports %]
    [% if loop.index0 > 0 %]

    [% endif %]
    ## @param [[ container.name ]].containerPorts.[[ port.name ]] Container port for [[ port.description ]]
    [[ port.name ]]: [[ port.number ]]
    [% endfor %]
  [% endif %]

  ## @param [[ container.name ]].resources CPU/Memory resource requests/limits
  resources: {}
    # limits:
    #   cpu: [[ container.resources.limits.cpu if container.resources else "100m" ]]
    #   memory: [[ container.resources.limits.memory if container.resources else "128Mi" ]]
    # requests:
    #   cpu: [[ container.resources.requests.cpu if container.resources else "100m" ]]
    #   memory: [[ container.resources.requests.memory if container.resources else "128Mi" ]]

  [% if container.extraArgs %]
  ## @extra [[ container.name ]].extraArgs [object] Additional container arguments
  [[ container.extraArgsDoc | indent(2) | trim ]]
  extraArgs:
    [[ container.extraArgs | indent(4) | trim ]]
  [% else %]
  ## @param [[ container.name ]].extraArgs Additional container arguments
  extraArgs: {}
    # name: ""
  [% endif %]

  ## @param [[ container.name ]].extraEnvVars Additional container environment variables
  extraEnvVars: []
    # - name: MY-NAME
    #   value: "MY-VALUE"

  ## @param [[ container.name ]].extraEnvVarsCM Name of existing ConfigMap containing additional container environment variables
  extraEnvVarsCM:

  ## @param [[ container.name ]].extraEnvVarsSecret Name of existing Secret containing additional container environment variables
  extraEnvVarsSecret:
[% endif %]
[% endfor %]
[% if component.headless %]

headless:
  service:
    ## @param [[ component_yaml_path ]]headless.service.annotations Headless service annotations
    annotations: {}

    ports:
      [% for port in component.headless.ports %]
      [% if loop.index0 > 0 %]

      [% endif %]
      ## @param [[ component_yaml_path ]]headless.service.ports.[[ port.name ]] Headless service port for [[ port.description ]]
      [[ port.name ]]: [[ port.number ]]
      [% endfor %]
[% endif %]
[% if component.metrics %]

metrics:
  [% if component.metrics.optional %]
  ## @param [[ component_yaml_path ]]metrics.enabled Enable the export of Prometheus metrics
  enabled: false
  [% endif %]
  [% if component.metrics.ports %]

  service:
    ## @param [[ component_yaml_path ]]metrics.service.annotations Metrics service annotations
    annotations: {}

    ## @param [[ component_yaml_path ]]metrics.service.type Metrics service type
    type: ClusterIP

    ## @param [[ component_yaml_path ]]metrics.service.clusterIP Metrics static cluster IP address or None for headless service when service type is ClusterIP
    clusterIP:
    # clusterIP: 10.43.0.100

    ports:
      [% for port in component.metrics.ports %]
      [% if loop.index0 > 0 %]

      [% endif %]
      ## @param [[ component_yaml_path ]]metrics.service.ports.[[ port.name ]] Metrics service port for [[ port.description ]]
      [[ port.name ]]: [[ port.number ]]
      [% endfor %]
  [% endif %]
  [% if component.serviceMonitor %]

  serviceMonitor:
    ## @param [[ component_yaml_path ]]metrics.serviceMonitor.enabled Specifies whether a service monitor should be created
    enabled: false

    ## @param [[ component_yaml_path ]]metrics.serviceMonitor.namespace Namespace in which to create the service monitor
    namespace: ""

    ## @param [[ component_yaml_path ]]metrics.serviceMonitor.annotations Service monitor annotations
    annotations: {}

    ## @param [[ component_yaml_path ]]metrics.serviceMonitor.labels Additional service monitor labels
    labels: {}

    ## @param [[ component_yaml_path ]]metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in Prometheus
    jobLabel: ""

    ## @param [[ component_yaml_path ]]metrics.serviceMonitor.honorLabels Whether to choose the metric’s labels on collisions with target labels
    honorLabels: false

    ## @param [[ component_yaml_path ]]metrics.serviceMonitor.interval Interval at which metrics should be scraped
    interval: ""

    ## @param [[ component_yaml_path ]]metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
    scrapeTimeout: ""

    ## @param [[ component_yaml_path ]]metrics.serviceMonitor.metricRelabelings Specify additional relabeling of metrics
    metricRelabelings: []

    ## @param [[ component_yaml_path ]]metrics.serviceMonitor.relabelings Specify general relabeling
    relabelings: []
  [% endif %]
[% endif %]
[% if component.persistentvolumeclaim %]

persistence:
  ## @param [[ component_yaml_path ]]persistence.enabled Enable persistence using PVC
  enabled: false
  [% if component.deployment.type == "deployment" %]

  ## @param [[ component_yaml_path ]]persistence.existingClaim Name of an existing PVC to use
  existingClaim:
  # existingClaim: my-pvc
  [% endif %]

  ## @param [[ component_yaml_path ]]persistence.accessMode PVC access mode
  accessMode: ReadWriteOnce

  ## @param [[ component_yaml_path ]]persistence.annotations PVC annotations
  annotations: {}

  ## @param [[ component_yaml_path ]]persistence.size PVC size
  size: 1Gi

  ## @param [[ component_yaml_path ]]persistence.storageClass PVC storage class
  storageClass:
  # storageClass: -
[% endif %]
[% if component.extraValues %]

[[ component.extraValues | trim ]]
[% endif %]
[% if component.secret %]

## @param [[ component_yaml_path ]]existingSecret Name of existing Secret to use
existingSecret: ""

[[ component.secretKeyValues | trim ]]
[% endif %]
[% if component.tls %]

tls:
  ## @param [[ component_yaml_path ]]tls.caCert TLS CA certificate (Generated using the `genCA` function if not set)
  caCert: ""

  ## @param [[ component_yaml_path ]]tls.cert TLS certificate (Generated using the `genSignedCert` function if not set)
  cert: ""

  ## @param [[ component_yaml_path ]]tls.key TLS private key (Generated using the `genSignedCert` function if not set)
  key: ""

  ## @param [[ component_yaml_path ]]tls.existingSecret Name of existing TLS Secret to use
  existingSecret: ""
[% endif %]
[% endfilter %]
[% endfor %]
[% if application.mariadb %]

## @section MariaDB parameters

mariadb:
  ## @param mariadb.enabled Whether to use the MariaDB chart
  enabled: [[ "false" if application.mariadb == "optional" else "true" ]]

  ## @param mariadb.architecture MariaDB architecture
  architecture: standalone

  auth:
    ## @param mariadb.auth.database MariaDB database
    database: [[ application.name ]]

    ## @param mariadb.auth.username MariaDB user
    username: [[ application.name ]]

    ## @param mariadb.auth.password MariaDB password
    password: [[ application.name ]]

    ## @param mariadb.auth.existingSecret Name of existing Secret to use
    existingSecret: ""

  primary:
    service:
      ports:
        ## @param mariadb.primary.service.ports.mysql MariaDB port
        mysql: 3306

externalMariadb:
  ## @param externalMariadb.enabled Whether to use an external MariaDB
  enabled: false

  ## @param externalMariadb.host External MariaDB host
  host: mariadb

  ## @param externalMariadb.port External MariaDB port
  port: 3306

  ## @param externalMariadb.username External MariaDB user
  username: [[ application.name ]]

  ## @param externalMariadb.password External MariaDB password
  password: [[ application.name ]]

  ## @param externalMariadb.existingSecret Name of existing Secret to use
  existingSecret: ""

  ## @param externalMariadb.existingSecretKeyPassword Name of the key in existing Secret that contains MariaDB password
  existingSecretKeyPassword: mariadb-password

  ## @param externalMariadb.database External MariaDB database
  database: [[ application.name ]]
[% endif %]
[% if application.mongodb %]

## @section MongoDB parameters

mongodb:
  ## @param mongodb.enabled Whether to use the MongoDB chart (for testing purposes only)
  enabled: false
[% endif %]
[% if application.postgresql %]

## @section PostgreSQL parameters

postgresql:
  ## @param postgresql.enabled Whether to use the PostgreSQL chart
  enabled: [[ "false" if application.postgresql == "optional" else "true" ]]

  auth:
    ## @param postgresql.auth.username PostgreSQL user
    username: [[ application.name ]]

    ## @param postgresql.auth.password PostgreSQL password
    password: [[ application.name ]]

    ## @param postgresql.auth.database PostgreSQL database
    database: [[ application.name ]]

    ## @param postgresql.auth.existingSecret Name of existing Secret to use
    existingSecret: ""

  ## @param postgresql.architecture PostgreSQL architecture
  architecture: standalone

  primary:
    service:
      ports:
        ## @param postgresql.primary.service.ports.postgresql PostgreSQL port
        postgresql: 5432

externalPostgresql:
  ## @param externalPostgresql.enabled Whether to use an external PostgreSQL
  enabled: false

  ## @param externalPostgresql.host External PostgreSQL host
  host: postgresql

  ## @param externalPostgresql.port External PostgreSQL port
  port: 5432

  ## @param externalPostgresql.username External PostgreSQL user
  username: [[ application.name ]]

  ## @param externalPostgresql.password External PostgreSQL password
  password: [[ application.name ]]

  ## @param externalPostgresql.existingSecret Name of existing Secret to use
  existingSecret: ""

  ## @param externalPostgresql.existingSecretKeyPassword Name of the key in existing Secret that contains PostgreSQL password
  existingSecretKeyPassword: password

  ## @param externalPostgresql.database External PostgreSQL database
  database: [[ application.name ]]
[% endif %]
[% if application.redis %]

## @section Redis parameters

redis:
  ## @param redis.enabled Whether to use the Redis chart
  enabled: [[ "false" if application.redis == "optional" else "true" ]]

  ## @param redis.architecture Redis architecture
  architecture: standalone

  auth:
    ## @param redis.auth.enabled Enable password authentication
    enabled: true

    ## @param redis.auth.password Redis password
    password: [[ application.name ]]

    ## @param redis.auth.existingSecret Name of existing Secret to use
    existingSecret: ""

  master:
    service:
      ports:
        ## @param redis.master.service.ports.redis Redis port
        redis: 6379

externalRedis:
  ## @param externalRedis.enabled Whether to use an external Redis
  enabled: false

  ## @param externalRedis.host External Redis host
  host: redis

  ## @param externalRedis.port External Redis port
  port: 6379

  ## @param externalRedis.password External Redis password
  password: [[ application.name ]]

  ## @param externalRedis.existingSecret Name of existing Secret to use
  existingSecret: ""

  ## @param externalRedis.existingSecretKeyPassword Name of the key in existing Secret that contains Redis password
  existingSecretKeyPassword: redis-password
[% endif %]
[% if application.crds %]

## @section CRDs parameters

crds:
  image:
    ## @param crds.image.registry Image registry
    registry: docker.io

    ## @param crds.image.repository Image repository
    repository: bitnami/kubectl

    ## @param crds.image.tag Image tag
    tag: 1.26.3

    ## @param crds.image.digest Image digest
    digest: ""

    ## @param crds.image.pullPolicy Image pull policy
    pullPolicy: IfNotPresent

  ## @param crds.podAnnotations Additional pod annotations
  podAnnotations: {}

  ## @param crds.resources CPU/Memory resource requests/limits
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  ## @param crds.nodeSelector Node labels for pod assignment
  nodeSelector: {}

  ## @param crds.tolerations Tolerations for pod assignment
  tolerations: []

  ## @param crds.affinity Map of node/pod affinities
  affinity: {}
[% endif %]

## @section Tests parameters

tests:
  image:
    ## @param tests.image.registry Image registry
    registry: ghcr.io

    ## @param tests.image.repository Image repository
    repository: cowboysysop/pytest

    ## @param tests.image.tag Image tag
    tag: 1.0.35

    ## @param tests.image.digest Image digest
    digest: ""

    ## @param tests.image.pullPolicy Image pull policy
    pullPolicy: IfNotPresent
