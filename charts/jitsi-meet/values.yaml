# Default values for jitsi-meet.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

jibri:
  # XMPP recorder user for Jibri client connections
  recorderUser: "recorder"

  # XMPP recorder password for Jibri client connections
  recorderPassword: ""

  # XMPP user for Jibri client connections
  xmppUser: "jibri"

  # XMPP password for Jibri client connections
  xmppPassword: ""

  # Name of existing Secret to use (jibri component)
  existingSecret: ""

jicofo:
  replicaCount: 1

  image:
    repository: jitsi/jicofo
    tag: 4384-1
    pullPolicy: IfNotPresent

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  # Additional pod annotations (jicofo component)
  podAnnotations: {}

  # Additional pod labels (jicofo component)
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 200m
    #   memory: 512Mi
    # requests:
    #   cpu: 50m
    #   memory: 256Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # XMPP component password for Jicofo
  componentSecret: ""

  # XMPP user for Jicofo client connections
  authUser: "focus"

  # XMPP password for Jicofo client connections
  authPassword: ""

  # Name of existing Secret to use (jicofo component)
  existingSecret: ""


# org.jitsi.jicofo.ALWAYS_TRUST_MODE_ENABLED=true
# org.jitsi.jicofo.BRIDGE_MUC={{ .Env.JVB_BREWERY_MUC }}@{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}

# {{ if and .Env.JIBRI_BREWERY_MUC .Env.JIBRI_PENDING_TIMEOUT }}
# org.jitsi.jicofo.jibri.BREWERY={{ .Env.JIBRI_BREWERY_MUC}}@{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}
# org.jitsi.jicofo.jibri.PENDING_TIMEOUT={{ .Env.JIBRI_PENDING_TIMEOUT }}
# {{ end }}

# {{ if and .Env.JIGASI_SIP_URI .Env.JIGASI_BREWERY_MUC }}
# org.jitsi.jicofo.jigasi.BREWERY={{ .Env.JIGASI_BREWERY_MUC}}@{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}
# {{ end }}

# {{ if .Env.ENABLE_AUTH | default "0" | toBool }}
# org.jitsi.jicofo.auth.URL=XMPP:{{ .Env.XMPP_DOMAIN }}
# {{ end }}

# {{ if .Env.JICOFO_RESERVATION_REST_BASE_URL }}
# org.jitsi.impl.reservation.rest.BASE_URL={{ .Env.JICOFO_RESERVATION_REST_BASE_URL }}
# {{ end }}

# DAEMON_OPTS="--host=$XMPP_SERVER  "

  metrics:
    service:
      type: ClusterIP
      port: 8944

jigasi:
  # XMPP user for Jigasi MUC client connections
  xmppUser: "jigasi"

  # XMPP password for Jigasi MUC client connections
  xmppPassword: ""

  # Name of existing Secret to use (jigasi component)
  existingSecret: ""

jvb:
  replicaCount: 1

  image:
    repository: jitsi/jvb
    tag: 4384-1
    pullPolicy: IfNotPresent

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  # Additional pod annotations (jvb component)
  podAnnotations: {}

  # Additional pod labels (jvb component)
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 200m
    #   memory: 1024Mi
    # requests:
    #   cpu: 50m
    #   memory: 512Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # XMPP user for JVB MUC client connections
  authUser: "jvb"

  # XMPP password for JVB MUC client connections
  authPassword: ""

  # Name of existing Secret to use (jvb component)
  existingSecret: ""

  metrics:
    service:
      type: ClusterIP
      port: 8942

prosody:
  replicaCount: 1

  image:
    repository: jitsi/prosody
    tag: 4384-1
    pullPolicy: IfNotPresent

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  # Additional pod annotations (prosody component)
  podAnnotations: {}

  # Additional pod labels (prosody component)
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    xmppClientPort: 5222
    xmppServerPort: 5269
    httpPort: 5280
    componentPort: 5347

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 200m
    #   memory: 1024Mi
    # requests:
    #   cpu: 50m
    #   memory: 512Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  #globalModules: statistics,alert,prometheus

  metrics:
    service:
      type: ClusterIP
      port: 8943

# admins = { "{{ .Env.JICOFO_AUTH_USER }}@{{ .Env.XMPP_AUTH_DOMAIN }}" }
# http_default_host = "{{ .Env.XMPP_DOMAIN }}"

# {{ $ENABLE_AUTH := .Env.ENABLE_AUTH | default "0" | toBool }}
# {{ $AUTH_TYPE := .Env.AUTH_TYPE | default "internal" }}
# {{ $JWT_ASAP_KEYSERVER := .Env.JWT_ASAP_KEYSERVER | default "" }}
# {{ $JWT_ALLOW_EMPTY := .Env.JWT_ALLOW_EMPTY | default "0" | toBool }}
# {{ $JWT_AUTH_TYPE := .Env.JWT_AUTH_TYPE | default "token" }}
# {{ $JWT_TOKEN_AUTH_MODULE := .Env.JWT_TOKEN_AUTH_MODULE | default "token_verification" }}

# {{ if and $ENABLE_AUTH (eq $AUTH_TYPE "jwt") .Env.JWT_ACCEPTED_ISSUERS }}
# asap_accepted_issuers = { "{{ join "\",\"" (splitList "," .Env.JWT_ACCEPTED_ISSUERS) }}" }
# {{ end }}

# {{ if and $ENABLE_AUTH (eq $AUTH_TYPE "jwt") .Env.JWT_ACCEPTED_AUDIENCES }}
# asap_accepted_audiences = { "{{ join "\",\"" (splitList "," .Env.JWT_ACCEPTED_AUDIENCES) }}" }
# {{ end }}

# VirtualHost "{{ .Env.XMPP_DOMAIN }}"
# {{ if $ENABLE_AUTH }}
#   {{ if eq $AUTH_TYPE "jwt" }}
#     authentication = "{{ $JWT_AUTH_TYPE }}"
#     app_id = "{{ .Env.JWT_APP_ID }}"
#     app_secret = "{{ .Env.JWT_APP_SECRET }}"
#     allow_empty_token = {{ if $JWT_ALLOW_EMPTY }}true{{ else }}false{{ end }}
#     {{ if $JWT_ASAP_KEYSERVER }}
#     asap_key_server = "{{ .Env.JWT_ASAP_KEYSERVER }}"
#     {{ end }}

#     {{ else if eq $AUTH_TYPE "ldap" }}
#     authentication = "cyrus"
#     cyrus_application_name = "xmpp"
#     allow_unencrypted_plain_auth = true
#   {{ else if eq $AUTH_TYPE "internal" }}
#     authentication = "internal_plain"
#   {{ end }}
# {{ else }}
#     authentication = "anonymous"
# {{ end }}
#     ssl = {
#         key = "/config/certs/{{ .Env.XMPP_DOMAIN }}.key";
#         certificate = "/config/certs/{{ .Env.XMPP_DOMAIN }}.crt";
#     }
#     modules_enabled = {

#         {{ if .Env.XMPP_MODULES }}
#         "{{ join "\";\n\"" (splitList "," .Env.XMPP_MODULES) }}";
#         {{ end }}
#     }

#     c2s_require_encryption = false

# {{ if and $ENABLE_AUTH (.Env.ENABLE_GUESTS | default "0" | toBool) }}
# VirtualHost "{{ .Env.XMPP_GUEST_DOMAIN }}"
#     authentication = "anonymous"
#     c2s_require_encryption = false
# {{ end }}

# VirtualHost "{{ .Env.XMPP_AUTH_DOMAIN }}"
#     ssl = {
#         key = "/config/certs/{{ .Env.XMPP_AUTH_DOMAIN }}.key";
#         certificate = "/config/certs/{{ .Env.XMPP_AUTH_DOMAIN }}.crt";
#     }
#     authentication = "internal_plain"

# {{ if .Env.XMPP_RECORDER_DOMAIN }}
# VirtualHost "{{ .Env.XMPP_RECORDER_DOMAIN }}"
#     modules_enabled = {
#       "ping";
#     }
#     authentication = "internal_plain"
# {{ end }}

# Component "{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}" "muc"
#     modules_enabled = {
#         "ping";
#         {{ if .Env.XMPP_INTERNAL_MUC_MODULES }}
#         "{{ join "\";\n\"" (splitList "," .Env.XMPP_INTERNAL_MUC_MODULES) }}";
#         {{ end }}
#     }


# Component "{{ .Env.XMPP_MUC_DOMAIN }}" "muc"
#     storage = "memory"
#     modules_enabled = {
#         {{ if .Env.XMPP_MUC_MODULES }}
#         "{{ join "\";\n\"" (splitList "," .Env.XMPP_MUC_MODULES) }}";
#         {{ end }}

#     }


# Component "focus.{{ .Env.XMPP_DOMAIN }}"
#     component_secret = "{{ .Env.JICOFO_COMPONENT_SECRET }}"



# {{ $LOG_LEVEL := .Env.LOG_LEVEL | default "info" }}


# -- Enable use of libevent for better performance under high load
# -- For more information see: http://prosody.im/doc/libevent
# --use_libevent = true;

# -- This is the list of modules Prosody will load on startup.
# -- It looks for mod_modulename.lua in the plugins folder, so make sure that exists too.
# -- Documentation on modules can be found at: http://prosody.im/doc/modules
# modules_enabled = {
#         {{ if .Env.GLOBAL_MODULES }}
#         "{{ join "\";\n\"" (splitList "," .Env.GLOBAL_MODULES) }}";
#         {{ end }}
# };

# {{ if .Env.GLOBAL_CONFIG }}
# {{ join "\n" (splitList "\\n" .Env.GLOBAL_CONFIG) }}
# {{ end }}

# {{ if eq (.Env.AUTH_TYPE | default "internal") "ldap" }}
# ldap_servers: {{ .Env.LDAP_URL }}
# ldap_search_base: {{ .Env.LDAP_BASE }}
# {{ if .Env.LDAP_BINDDN | default "" }}
# ldap_bind_dn: {{ .Env.LDAP_BINDDN }}
# ldap_bind_pw: {{ .Env.LDAP_BINDPW }}
# {{ end }}
# ldap_filter: {{ .Env.LDAP_FILTER | default "uid=%u" }}
# ldap_version: {{ .Env.LDAP_VERSION | default "3" }}
# ldap_auth_method: {{ .Env.LDAP_AUTH_METHOD | default "bind" }}
#   {{ if .Env.LDAP_USE_TLS | default "0" | toBool }}
# ldap_tls_key: /config/certs/{{ .Env.XMPP_DOMAIN }}.key
# ldap_tls_cert: /config/certs/{{ .Env.XMPP_DOMAIN }}.crt
#     {{ if .Env.LDAP_TLS_CHECK_PEER | default "0" | toBool }}
# ldap_tls_check_peer: yes
# ldap_tls_cacert_file: {{ .Env.LDAP_TLS_CACERT_FILE | default "/etc/ssl/certs/ca-certificates.crt" }}
# ldap_tls_cacert_dir: {{ .Env.LDAP_TLS_CACERT_DIR | default "/etc/ssl/certs" }}
#     {{ end }}
#     {{ if .Env.LDAP_TLS_CIPHERS }}
# ldap_tls_ciphers: {{ .Env.LDAP_TLS_CIPHERS }}
#     {{ end }}
#   {{ end }}
# {{ end }}
# {{ if .Env.LDAP_START_TLS | default "0" | toBool }}
# ldap_start_tls: yes
# {{ end }}

xmpp:
  # Internal XMPP domain
  domain: meet.jitsi

  # Internal XMPP domain for authenticated services
  authDomain: auth.meet.jitsi

  # Domain for the jibri recorder
  recorderDomain: recorder.meet.jitsi

web:
  replicaCount: 1

  image:
    repository: jitsi/web
    tag: 4384-1
    pullPolicy: IfNotPresent

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  # Additional pod annotations (web component)
  podAnnotations: {}

  # Additional pod labels (web component)
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 200m
    #   memory: 1024Mi
    # requests:
    #   cpu: 50m
    #   memory: 512Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  metrics:
    service:
      type: ClusterIP
      port: 8943
